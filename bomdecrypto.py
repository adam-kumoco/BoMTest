from Crypto.Cipher import AES
import binascii
import pprint
import codecs
import json
from base64 import b64decode,b64encode
from datetime import datetime
import time
import calendar


# bommsg = 'aa4cc18e79aa061875cac3cff01c5e9eac97af89ace441a3bc397c542afd975de5a16f2256c29c83592a5a013e4a08'
# bom_msg_bin = binascii.unhexlify(bommsg)
# Note decryption only works when in binary

# Grab the message to be decrypted
# bommsg = '09467cc62e95fb7db51bd329c2e5ddc19e46d0ce48ab0dbc398ad87c2b4c8b3f87370593a8b2a9772907b2715f8195e6baf1457648ccf6deca450e2ddb69c67d0619992385e6004f2031527de61f4dcad0b937c777944a86029268001f093c8856b1c798c0e9db8d2663911068458271a32c8926eed3eb04d88e6f961724a3c15da959ff13737e578dd37bebc328a9debbfa9b3247b26b1e3f0ff45717f03f46ceb9ed20ce02b23e59ae41503648e70d88ece3d18a159915a8a37e9b89ba521548785bd5bdc1338e4b353d2fcef0d4801d13f0f4a70fcf0da122d33c2e8d5a4ee2129f8a3d224031782cda166264812b341a97fbf4f8f59aa92e25710e6653ae05711fc119b5437eb358439f19caf3f8d6954fde0ac5e9ce297b01aeba693df7d7053cbf439bde4d47a5e0be6cf2fa8a345b31ac6c5802747d395e8df387996e6bafeb968f0ce522d2dec8ab950116d2711f5c812b1f930baacc21ceadc8c1e23380d3e898e3c0a32c9efadf4576b25e6c44b215de6cc60b9c5d6e6fe69e4731ade31b78f3c36fdbc9aa7929a41063184c486195245d2d5cd914aedcfe2c81a87cee17cbb2e123e9b8ceb4f813ec25661f843dff454f774c1cc969415dd5eae037d430a68be3214ecb2bc9dacca181978d6441132176d48d6ee38cadf19775585753fc8365eda66e60ff189e41b240dec3183fe4b15708f4a521d83e8643f902428bc736d540f8557338825922134bf63013b4b2c0efb418eacf8e39f06455c8a29f3b17c71c7c982cdf288c8b0777f7db8661b7a318efe7c953b3981db6f4607e91f721f7d18be320ab02fb2445f5a1750c4d4790bf12c2a8837b53b8b747a7ec08ceca93700b88a6e675ad9c88d18ed3fecf15c96aa61adc815ccfdf25518c54167f0c35f94c2017e00febf66954a6db3008956309a7dfa1f9ce7115bd68e9d4f63f606acb9df0bd6ba370c556106ef8a906d79ac64ae05470490934e403147f7d722618d5350aae1c5ef62f81cbc76e045a43f76d967a8c1241337e2127f38aad5b10a40e9a44ed7bf86e818fcb6b6dc4788b352809b9a318b983c235480470cf3b1d1750e27f029fc65e23ec68252b3b62fb255589f05f3caa756a724e9cd20447e04dcc781a1dbbec09cc37dc3c637b8b1f36efaceb72e3f18294d22027bc1e6d97176eed08662c08263e0a927884234cb565d2eeb003b3a61af2b08538c2650a89ae7d0e349151dcc3cf244e4670b159bf66af9068d4f146893749fac299f886dcdb470e7ffee46dccc270852bd8e738559071276ece245a1ace70d62ad0d4b8c8d9f35a306b200655ba5f4e7182a82e0a31cc281b6c230e6ba9f0a9b307a1d79fd79cd785644deb824c9d58fbd9914487ebb3db2d30a610ed1aed354a1f58447542fd2119e6b79663ddcf506be87c3527001544ce40981d8a6093fcf39921dd48e674f7b21af44e61e8167eef6a0233b19eadaf15d7e8cdf99e9d0403'
bommsg = '4c7df5b0c64c1ac247460ed796489a3318e88f907166666070a728bed49ffc4395ad15b53ccfa0a5a0a1a1ac71f66d941016de38099e2ca600705d846a9a33895d89740e8c7bfb456ac9c459fd840ab2d66941c2a22d441dde37dd7769fc539dcf4710b27dc127c32d1df73a3853ae11645b08b85ad44c289be96ace12b0f96d9710e57eb58cc8ee79bc7a49e1055fd8bf7096a9ee30ffe355aaed38a10627dd34bcad17f5852db644be6b4758ef4c9aec3c1089d126b1e5c971ffbab914191d59adb682a11fd7051aa8a709e48058ef8562c4460f4c3bf7ae8ba40ee1d6d787da170aa2aeec55d3e23651c17ae93bf2339954b6dae2f51b10bb999a9b4945769a446bd9abcc9fd2226417fac10e44ebafba95a7aea167be9ea08731f975a03efc9288a23ed7a2c7226fea205c4fff9cbd4dcae902deeb8d08b2'
# bommsg = '511a41a70a89aab28bcd751689e2d5276cc69f1d5bb32fd2542a6a2c2249605ff010fe598636f09a4a3d1655eb2644b1efee91ec79d4909cea368133fd2c6332344503be1bc1fc1cb95ccd8125159381e79187ea3618599114947f917b756ae22e3a8dc403da1c6459db92e1e8b090ea4adee7eeaae0ab3678fcf9835abc899218e81ce694d2f49816f52774e988b6fd9ef93d507a2cbff83e7d4f33c928e40598eb9d4d02498437e436697a304d4ec65ee63cc8a4cf6e8bb03e888efbc01e3c40009ad01f194d47bac8a7f93f3a7489b3f9455ba6128d4b5068fc5d08614c66c27d4432a0f61071580bec48ea4aa2a4726c369817ea28480d2c971469c174e70eafe98e4be9350fa6143ac6d9d1a02c6c3c64060756bad6b9b199467f62497a14ed5304c0189c4313d66c4e6eb4892d11ff8e39a1539be6676fbd6ac7e5001a0a23724f795a7ba8b4a43c1ee1c888355031f19918d629d566faae2626b5f4d3e5c8dc4f720e3d9ddf469837c75221291ea766bdd63499f649065e7d7a16103c7afe2f32c33280df916586816e05ed6c41cd340c883c532539f2233cc26a9a584c6c4a0a59719801819a89b8a47b2d4c46c441e67a70aa3a7298f30ae3a9940866f6cc52a8b8e4958b3b36a454623cb6545176f4b7c254359c6d3d6094ad44fd06add8263ec7e9a4d7917532ab7f9e3e55d12595c48da80b5b8ca772816d0f9c16a9712b4febcb6aafefbbc4ac5961c15463a4fe81a5456f05eb192d7aed73eecad8e3b1242add4680b71cb86be2dbd47f58154aa3ded73df3069d6cd328b17eb4f5252775637565686fb1e6d3bdbfa1eac7d4b2483b1ccbd301e2aeade4ff0b1c35f82046357c0a10cfa3591539e5d388dc462c4c4b78b88841755ab9a415f3454e20ca5cc66cca3cdd56b9e46a0d4d3cc012b3d22fc284e70325886778ee30e85e92a86c74db698c22b6de49574434b565a9e15d3193de75375025dfedb58f549e11af277eae9a150e371938c0bbbe0beaed19a83e02b6724e2611854a308ee6ef9ed1cd4a56fb35cc2a051a16eefb37765e1684991d24b9615d2a04cf045ce52371b867ca01a075da990d52f8565371476430b62a383e2604161b0bdf72b1714c8c51755b9deaae38b48ac1fd6872178c4cccc5aad0c8324850c83c1fccb0d10847ca2a0962c98ef385ec2698abb480b22c48bb5d38d70d02a15895006f12817b4080a2417efd91e11bae8c0ea4ea7e0a5c80ec60fe57861cfbb21e7a44865c8b0388192cbe1c79c2b200b522b340a6366662db010624cb563c6b38404fcb9b472c891237a3fca905f50e832f44eef4b6be3bf0007fe30a1723919f56cd6429403fd0849c05aab9b37289aebacda854508fe767c8908239d70dbf6a01dba1c40e2f42f9cb0bb04719ab5891fe2721e6d12ecb4f7268f8326ce5b5f2f29ab8b618741d4482f94cc804b01580a8cb4916beb2035b9aff736dae55f6fc4b81e8'

# Remove the first 16bytes (32 hex chars) and convert to binary for the IV or Nonce
bomnonce = binascii.unhexlify(bommsg[0:32].encode('ascii'))
# bomnonce = bommsg[0:32].encode('ascii')
print(bomnonce)
print(bommsg[0:32])

# Remove the last 16bytes (32 hex chars) and convert to binary for the auth tag
bomauth = binascii.unhexlify(bommsg[-32:].encode('ascii'))
# bomauth = bommsg[-32:].encode('ascii')
print(bomauth)
print(bommsg[-32:])

print(bommsg[32:-32])
# Extract the remaining characters and convert to binary for the message
bommsg_query = binascii.unhexlify(bommsg[32:-32].encode('utf-8'))
# bommsg_query = bommsg[32:-32].encode('ascii')
print(bommsg_query)

# Shared symmetric key
# bomkey = b'2A282204AA22E03E90F6909003A285E5'
# bomkey = b'8613FE17684EB60B91D0E8C143775B57'
# bomkey = b'secretKey12345678998765432112345'
bomkey = b'7DCBE6CA63923D25829AE77128280025'

# Initialise the cipher with the IV/nonce from the message
bomcipher = AES.new(bomkey, AES.MODE_GCM, nonce=bomnonce)

# Decrypt and verify the message passing in the msg and the authtag
bomenctext = bomcipher.decrypt_and_verify(bommsg_query, bomauth)


# Import to JSON and print
try:
    test_json = json.loads(codecs.decode(bomenctext, 'UTF-8'))

    pprint.pprint(test_json)
except:
    print(codecs.decode(bomenctext, 'UTF-8'))
